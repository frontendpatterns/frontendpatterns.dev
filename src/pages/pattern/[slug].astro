---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { render } from "astro:content";
import EmailSignup from "../../components/EmailSignup.astro";

const { slug } = Astro.params;

export async function getStaticPaths() {
  const posts = await getCollection("patterns", ({ data }) => {
    return data.draft !== true;
  });
  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);

const addedDate =
  post.data.added instanceof Date
    ? post.data.added
    : new Date(post.data.added ?? Date.now());

const structuredData = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "TechArticle",
  headline: `${post.data.title} Pattern`,
  description:
    post.data.metaDescription ??
    "Frontend architecture pattern from frontendpatterns.dev.",
  author: {
    "@type": "Person",
    name: "Den Odell",
  },
  datePublished: addedDate.toISOString(),
  programmingLanguage: ["JavaScript", "TypeScript"],
});
---

<BaseLayout title={post.data.title} metaDescription={post.data.metaDescription}>
  <script is:inline type="application/ld+json" set:html={structuredData} />

  <header
    class="space-y-2 border-b border-slate-200 pb-8 pt-8 dark:border-slate-800"
  >
    <div class="flex flex-wrap items-center text-sm text-slate-500">
      <span
        class="inline-flex items-center rounded-full border border-slate-200 px-3 py-1 dark:border-slate-700 dark:text-slate-300"
      >
        Pattern #{post.data.id.toString().padStart(3, "0")}
      </span>
    </div>

    <h1
      class="text-6xl font-bold tracking-tight text-slate-900 dark:text-slate-100 pb-10"
    >
      {post.data.title}
    </h1>

    <p
      class="text-sm font-semibold uppercase tracking-[0.2em] text-slate-500 dark:text-slate-400 pb-5"
    >
      <a href={`/patterns/${post.data.category?.toLocaleLowerCase()}`}
        >{post.data.category} Pattern</a
      >
    </p>

    {
      post.data.difficulty && (
        <p class="inline-flex items-center text-sm text-slate-600 dark:border-slate-700 dark:text-slate-300">
          {post.data.difficulty}
        </p>
      )
    }

    <p class="text-xs text-slate-500 dark:text-slate-400">
      Added: {
        new Date(post.data.added).toLocaleDateString("en-GB", {
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </p>
  </header>

  <article
    class="prose prose-slate max-w-none dark:prose-invert prose-h1:hidden prose-headings:font-semibold prose-headings:text-slate-900 dark:prose-headings:text-slate-100 prose-a:text-sky-700 hover:prose-a:text-sky-800 dark:prose-a:text-sky-300 dark:hover:prose-a:text-sky-200"
  >
    <Content />
  </article>

  <EmailSignup />

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const tabGroups = document.querySelectorAll(".prose .tab-group");

      tabGroups.forEach((group, groupIndex) => {
        if (group.dataset.tabsHydrated === "true") {
          return;
        }

        const panels = Array.from(
          group.querySelectorAll(":scope > .tab-panel"),
        );

        if (panels.length <= 1) {
          return;
        }

        group.dataset.tabsHydrated = "true";

        const tablist = document.createElement("div");
        tablist.className = "tab-list";
        tablist.setAttribute("role", "tablist");

        const panelContainer = document.createElement("div");
        panelContainer.className = "tab-panels";

        const buttons = [];

        panels.forEach((panel, panelIndex) => {
          const tabId = `tab-${groupIndex}-${panelIndex}`;
          const panelId = `tab-panel-${groupIndex}-${panelIndex}`;
          const label = getPanelLabel(panel, panelIndex);

          const button = document.createElement("button");
          button.type = "button";
          button.className = "tab-trigger";
          button.setAttribute("role", "tab");
          button.setAttribute("id", tabId);
          button.setAttribute("aria-controls", panelId);
          button.setAttribute("tabindex", "-1");
          button.textContent = label;

          tablist.appendChild(button);
          buttons.push(button);

          panel.setAttribute("role", "tabpanel");
          panel.setAttribute("id", panelId);
          panel.setAttribute("aria-labelledby", tabId);
          panel.setAttribute("tabindex", "0");
          panel.hidden = true;

          panelContainer.appendChild(panel);
        });

        const activateTab = (activeIndex) => {
          buttons.forEach((button, index) => {
            const isActive = index === activeIndex;
            button.setAttribute("aria-selected", isActive ? "true" : "false");
            button.setAttribute("tabindex", isActive ? "0" : "-1");
            button.classList.toggle("is-active", isActive);

            panels[index].hidden = !isActive;
            panels[index].classList.toggle("is-active", isActive);
          });
        };

        const focusTab = (index) => {
          buttons[index]?.focus();
        };

        const clampIndex = (index) => {
          if (index < 0) return buttons.length - 1;
          if (index >= buttons.length) return 0;
          return index;
        };

        buttons.forEach((button, index) => {
          button.addEventListener("click", () => {
            activateTab(index);
            focusTab(index);
          });

          button.addEventListener("keydown", (event) => {
            const { key } = event;
            if (key === "ArrowRight" || key === "ArrowDown") {
              event.preventDefault();
              const next = clampIndex(index + 1);
              activateTab(next);
              focusTab(next);
            } else if (key === "ArrowLeft" || key === "ArrowUp") {
              event.preventDefault();
              const prev = clampIndex(index - 1);
              activateTab(prev);
              focusTab(prev);
            } else if (key === "Home") {
              event.preventDefault();
              activateTab(0);
              focusTab(0);
            } else if (key === "End") {
              event.preventDefault();
              activateTab(buttons.length - 1);
              focusTab(buttons.length - 1);
            }
          });
        });

        group.replaceChildren(tablist, panelContainer);
        activateTab(0);
      });
    });

    function getPanelLabel(panel, panelIndex) {
      const datasetLabel = panel.dataset.tabLabel;
      if (datasetLabel && datasetLabel.trim().length > 0) {
        return datasetLabel.trim();
      }

      const heading = panel.querySelector("h1, h2, h3, h4, h5, h6");
      if (heading) {
        const text = heading.textContent?.trim() ?? "";
        if (text) {
          const colonIndex = text.indexOf(":");
          if (colonIndex !== -1 && colonIndex < text.length - 1) {
            return text.slice(colonIndex + 1).trim();
          }
          return text;
        }
      }

      return `Tab ${panelIndex + 1}`;
    }
  </script>

  <style>
    :global(.prose .tldr) {
      margin: 2.5rem 0;
      padding: 1.75rem;
      border-left: 4px solid #0284c7;
      border-radius: 0.75rem;
      background: linear-gradient(135deg, #f8fafc 0%, #e0f2fe 100%);
      box-shadow: 0 8px 16px -12px rgba(2, 132, 199, 0.6);
    }

    :global(.prose .tldr > :first-child) {
      margin-top: 0;
    }

    :global(.prose .tldr > :last-child) {
      margin-bottom: 0;
    }

    :global(.dark .prose .tldr) {
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
      border-left-color: #38bdf8;
      box-shadow: 0 8px 20px -14px rgba(56, 189, 248, 0.8);
    }

    :global(.prose .tab-group) {
      border-radius: 0.75rem;
      border: 1px solid rgba(148, 163, 184, 0.35);
      background: rgba(248, 250, 252, 0.8);
      margin: 2.5rem 0;
      overflow: hidden;
    }

    :global(.dark .prose .tab-group) {
      background: rgba(15, 23, 42, 0.6);
      border-color: rgba(148, 163, 184, 0.25);
    }

    :global(.prose .tab-list) {
      display: flex;
      gap: 0.5rem;
      padding: 0.75rem;
      flex-wrap: wrap;
      background: rgba(224, 242, 254, 0.4);
      border-bottom: 1px solid rgba(148, 163, 184, 0.3);
    }

    :global(.dark .prose .tab-list) {
      background: rgba(30, 41, 59, 0.6);
      border-bottom-color: rgba(148, 163, 184, 0.2);
    }

    :global(.prose .tab-trigger) {
      appearance: none;
      border: none;
      background: transparent;
      padding: 0.6rem 1rem;
      border-radius: 9999px;
      font-size: 0.9rem;
      font-weight: 600;
      color: #0369a1;
      cursor: pointer;
      transition: all 0.18s ease-in-out;
    }

    :global(.prose .tab-trigger:hover) {
      background: rgba(14, 165, 233, 0.12);
      color: #075985;
    }

    :global(.prose .tab-trigger.is-active) {
      background: #0284c7;
      color: #f8fafc;
      box-shadow: 0 8px 20px -14px rgba(2, 132, 199, 0.8);
    }

    :global(.dark .prose .tab-trigger) {
      color: #38bdf8;
    }

    :global(.dark .prose .tab-trigger:hover) {
      background: rgba(56, 189, 248, 0.18);
      color: #e0f2fe;
    }

    :global(.dark .prose .tab-trigger.is-active) {
      background: rgba(56, 189, 248, 0.9);
      color: #0f172a;
      box-shadow: 0 8px 24px -18px rgba(56, 189, 248, 0.9);
    }

    :global(.prose .tab-panels) {
      padding: 1.5rem;
      background: #ffffff;
    }

    :global(.dark .prose .tab-panels) {
      background: rgba(15, 23, 42, 0.85);
    }

    :global(.prose .tab-panels .tab-panel) {
      margin: 0;
    }

    :global(.prose .tab-panels .tab-panel:not(:last-child)) {
      margin-bottom: 0;
    }

    :global(.prose .tab-panels .tab-panel[hidden]) {
      display: none;
    }

    :global(.prose .tab-group > .tab-panel) {
      padding: 1.5rem;
      border-top: 1px solid rgba(148, 163, 184, 0.25);
    }

    :global(.prose .tab-group > .tab-panel:first-of-type) {
      border-top: none;
    }

    :global(.dark .prose .tab-group > .tab-panel) {
      border-top-color: rgba(148, 163, 184, 0.15);
    }
  </style>
</BaseLayout>
